const prompt = require("prompt-sync")({ sigint: true });
("------------------------ CLASE FUNCIONES -------------------------");

/*
¬øQu√© Es Una Funci√≥n?
Una Funci√≥n es un bloque de c√≥digo que nos permite realizar una tarea
en particular. Para que la Funci√≥n se ejecute, "algo" debe invocarla.
Es una herramienta muy √∫til porque estiliza el c√≥digo y lo hace m√°s
escalable.

Las Funciones, inicialmente, deben ser definidas y, luego, deben ser
llamadas para que se puedan ejecutar.

*/

/* Sintaxis De La Funci√≥n

Declaraci√≥n De La Funci√≥n: */

function nombreEnCamelCase() {
  // Los par√©ntesis deben quedar vac√≠os y, luego,
  // se abre una llave para alojar las instrucciones.
  console.log("¬°Soy una Funci√≥n!"); // Bloque de c√≥digo que se ejecutar√° luego.
} // Se cierra la llave.

//Ejecuci√≥n De La Funci√≥n:

nombreEnCamelCase();
// El par√©ntesis es el operador aactivador de la Funci√≥n. Es decir que sirven para activarla y, por eso, siempre deben quedar vac√≠os.

/*
¬øQu√© Es Un Par√°metro?*
Un Par√°metro es una Variable que creamos al momento de definir una
Funci√≥n y, cada vez que la ejecutamos, le pasamos un argumento(su
valor) como input.


*/
function cantarCumpleA(nombre) {
  // Cuando declaramos la Funci√≥n, entre los par√©ntesis, definimos el nombre del Par√°metro. En este caso: nombre.
  console.log("¬°Que los cumplas feliz!");
  console.log("¬°Que los cumplas feliz!");
  console.log("¬°Que los cumplas " + nombre + "!");
  console.log("¬°Que los cumplas feliz!");
}

// Usaremos los Par√°metros en el c√≥digo, aunque a√∫n no sepamos exactamente cu√°l ser√° su valor.

cantarCumpleA("Claudia");
cantarCumpleA("Elon");
cantarCumpleA("Jeff");

// El valor del Par√°metro lo obtendr√°n una vez que se ejecute.

function areaCuadrado(lado) {
  console.log(lado * lado);
}

// Ahora, cuando ejecutamos areaCuadrado le pasaremos por Par√°metro un valor que reemplace a lado.

areaCuadrado(3);
areaCuadrado(10);
areaCuadrado(4);

/*
  Funciones Con M√∫ltiples Par√°metros
Podemos ejecutar las Funciones pas√°ndoles todos los Par√°metros que necesitemos.

Sintaxis De Las Funciones Con M√∫ltiples Par√°metros
Debemos separar los Par√°metros con una coma.
  */

function areaTriangulo(base, altura) {
  console.log((base * altura) / 2);
}
//Al invocar la Funci√≥n, tambi√©n debemos separar los valores de cada Par√°metro con una coma.

areaTriangulo(2, 5);
//Importante: El orden de los Par√°metros puede afectar el resultado.

function saludarTres(nombre1, nombre2, nombre3) {
  console.log("Hola " + nombre1);
  console.log("Hola " + nombre2);
  console.log("Hola " + nombre3);
}
saludarTres("Ron", "Harry", "Hermione");
saludarTres("Hermione", "Harry", "Ron");

/*
Funciones Con Variables Por ParaÃÅmetro
El Par√°metro que le pasemos a una Funci√≥n tambi√©n puede ser un valor
guardado en una Variable.

al ejecutar una Funci√≥n que lleve un input, podemos pasarle una
Variable como ParaÃÅmetro. Por ejemplo:
*/

function cantarCumple(persona) {
  console.log("¬°Que los cumplas feliz, " + persona + "!");
}

let nombre = prompt("¬øQui√©n cumple a√±os hoy?");
cantarCumple(nombre);

/*
Par√°metros Por Default
Los Par√°metros Por Default permiten que los Par√°metros de una Funci√≥n
sean definidos con un valor inicial.

Ejemplo:
*/

function multiply(a, b = 1) {
  console.log(a * b);
}
multiply(5, 2);

//Para asignarle un valor por defecto a cualquiera de los Par√°metros, tenemos que agregar = valor despu√©s del Par√°metro.

//Mir√° en este ejemplo qu√© sucede cuando le asignamos un valor por defecto solo a b:

let suma = (a, b = 0) => {
  return a + b;
};
console.log(suma());
// retorna NaN (not a number)
console.log(suma(3)); // 3 es el valor de a.
// retorna 3

/*
La Keyword return
La keyword return se usa al declarar una Funci√≥n para devolver un
valor espec√≠fico de ella. Esto sucede para guardar ese valor en una
Variable o usarlo por fuera del bloque de definici√≥n de la Funci√≥n.

Importante: Al usar esta palabra reservada se da por finalizada la
ejecuci√≥n de la Funci√≥n, independientemente de la extensi√≥n del bloque
de c√≥digo.

ejemplo:
*/

function cuadrado(numero) {
  console.log(numero * numero);
}
cuadrado(4) > 16;

console.log("El resultado de 4 al cuadrado es: " + cuadrado(4)) > 16;
/* > El resultado de 4 al cuadrado es: undefined
  undefined
  En este c√≥digo, el resultado de la operaci√≥n se muestra por consola.
Sin embargo, al no usar return ese valor no puede reutilizarse y, por
lo tanto, se imprime undefined.

  Observemos la ventaja de usar return: */

function cuadrado(numero) {
  return numero * numero;
}
console.log("El resultado de 4 al cuadrado es: " + cuadrado(4));
/*  > El resultado de 4 al cuadrado es: 16
  Con el keyword return tomamos el resultado de la operaci√≥n para,
luego, reutilizarlo y lograr que la Funci√≥n nos devuelva el valor del
cuadrado de un n√∫mero.
   */
function cuadrado(numero) {
  return numero * numero;
}
console.log("El resultado de 4 al cuadrado es: " + cuadrado(4));
//> El resultado de 4 al cuadrado es: 16
//let resultado = cuadrado(5);

function cuadrado(numero) {
  console.log(numero * numero);
}
let resultado = cuadrado(5);

//> 25 // Al no usar return, la consola muestra el resultado de la operaci√≥n pero no la guarda en memoria.
console.log(resultado);
//> undefined // Si le pedimos que nos muestre el valor de la Variable resultado, nos dir√° que no ha sido definido y, por eso, nos muestra undefined.

// Al usar la keyword return guardamos el valor de una Funci√≥n para, luego, reutilizarlo.

/*
Arrow Functions üèπ
Las Arrow Functions son una alternativa a la funci√≥n cl√°sica. Estas
son incorporadas a partir de ES6 y se ven a menudo en dferentes
ejemplos de internet.

Una de sus ventajas es que su sintaxis es m√°s compacta y flexible que
las Funciones cl√°sicas creadas con function.

*/
// Funci√≥n Cl√°sica
function sumar(a, b) {
  return a + b;
}
console.log(sumar(1, 3));
// 4

/*    Sintaxis
Las Arrow Functions se componen de 3 partes:

Los par√°metros entre par√©ntesis, en este caso (a,b).
Del lado derecho de los par√°metros, un Token (=>).
Por √∫ltimo, las llaves donde dentro estar√°n las acciones que se deban
ejecutar. */
// Arrow Function
let sumar = (a, b) => {
  return a + b;
};
console.log(sumar(1, 3));
// 4

/* Las Arrow Functions son muy flexibles a la hora de codear. Su
sintaxis se puede adaptar a cada caso.

Sigamos con el primer. */

let sumar = (a, b) => {
  return a + b;
};
//Podemos ver que la funci√≥n posee una sola expresi√≥n, es decir, dentro de sus llaves contiene directamente el return. Gracias a la flexibilidad de las Arrow functions podemos simplificar el primer ejemplo a esto:
let sumar = (a, b) => a + b;
//Se eliminan las llaves {} y el return pasa a ser impl√≠cito.

//Adem√°s, cuando una Arrow Function tiene un solo Par√°metro, los par√©ntesis son opcionales.

let multiplicar = (a) => a * 5;
console.log(multiplicar(4));
// 20

//Veamos la descomposici√≥n desde una funci√≥n cl√°sica a una Arrow function

// Funcion Cl√°sica
function saludar(nombre) {
  return `¬°Hola, ${nombre}!`;
}
// Pasamos a Arrow Function
let saludar = (nombre) => {
  return `¬°Hola, ${nombre}!`;
};
// Sacamos los par√©ntesis del par√°metro (ya que es uno solo)
let saludar = (nombre) => {
  return `¬°Hola, ${nombre}!`;
};
// Compactamos, eliminamos llaves y el return pasa a ser impl√≠cito luego del Token
let saludar = (nombre) => `¬°Hola, ${nombre}!`;

//Cuando una Arrow Function no tiene par√°metros, debemos escribir los par√©ntesis.

let mostrarSaludo = () => console.log("¬°Hola!");
mostrarSaludo(); // Muestra por consola ¬°Hola!
//Siempre que una Arrow Function tenga m√°s de una expresi√≥n entre sus acciones, es obligatorio poner las llaves. En caso de que querramos retornar algo, debemos usar la keyword return.
let saludar = (nombre) => {
  if (nombre) {
    return `¬°Hola, ${nombre}!`;
  } else {
    return `¬°Hola, an√≥nimo!`;
  }
};
console.log(saludar()); // ¬°Hola, an√≥nimo!
console.log(saludar("Luis")); // ¬°Hola, Luis!

//Ejercicios resueltos!

/* Crear una funci√≥n que convierta pulgadas en cent√≠metros.
Recibe por par√°metro pulgadas y retorna su equivalente en cent√≠metros. */

function pulgadasACm(pulgadas) {
  return pulgadas * 2.54;
}
pulgadasACm(5);

/* Crear una funci√≥n que recibe un string y lo convierte en una URL. 
ej: ‚Äúpepito‚Äù es devuelto como ‚Äúhttp://www.pepito.com‚Äù
 */

function url(string) {
  return "http://www." + string + ".com";
}
url("pepito");

/* Crear una funci√≥n que recibe un string y devuelve la misma frase pero con admiraci√≥n. */

function admirador(palabra) {
  return palabra + "!!!";
}
admirador("Bienvenidos");

/* Crear una funci√≥n que calcule la edad de los perros, considerando que 1 a√±o para nosotros son 7 de ellos. */

function edadPerro(edadHumano) {
  return edadHumano * 7;
}
edadPerro(27);

let edadPerro = (edadHumano) => edadHumano * 7;
edadPerro(27);

/* Crear una funci√≥n que calcule el valor de tu hora de trabajo, introduciendo tu sueldo mensual como par√°metro.
PD: considera que tu mes de trabajo tiene 40 horas. */

function valorHora(sueldo) {
  return sueldo / 40;
}
valorHora(1500);

/* Crear la funci√≥n calculadorIMC() que reciba la altura en metros y el peso en kilogramos y calcule el imc de una persona.  Luego, ejecutar la funci√≥n probando diferentes valores. */

function imc(peso, altura) {
  return peso / (altura * altura);
}
imc(75, 1.73);

let imc = (peso, altura) => peso / (altura * altura);
imc(75, 1.73);

/* Crear una funci√≥n que recibe un string en min√∫scula, lo convierta a may√∫sculas y lo retorne. 
Investiga que hace el m√©todo de strings .toUpperCase() */

function mayus(string) {
  return string.toUpperCase();
}
mayus("hola como estan?");

/* Crear una funci√≥n que recibe un par√°metro y devuelve qu√© tipo de dato es ese par√°metro. 
pista: te servir√° revisar que hace la palabra reservada typeof. */

function tipoDeDato(dato) {
  return typeof dato;
}
tipoDeDato(false);
tipoDeDato(27);
tipoDeDato("Nancy");

/* Crear una funci√≥n que le pasamos el radio de un c√≠rculo y nos devuelve la circunferencia.
Pista: Investiga si el objeto Math tiene entre sus propiedades el n√∫mero Pi */

function circulo(radio) {
  return Math.PI * radio * 2;
}
circulo(2);
